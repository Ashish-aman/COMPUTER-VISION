# -*- coding: utf-8 -*-
"""IntelligentMatch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yVfFuLHq81cx5kZUG2CFc0GDI5-e9dcI
"""

import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
import imutils
import cv2

im1 = cv2.imread("Element_Optimised_Colour_ShapeLin.png")
im2 = cv2.imread("reference.png")
cv2_imshow(im1)
cv2_imshow(im2)
img1 = cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)
img2 = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)

orb = cv2.ORB_create(50)
kp1, des1 = orb.detectAndCompute(img1, None) 
kp2, des2 = orb.detectAndCompute(img2, None)


matcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)

matches = matcher.match(des1, des2, None) 

matches = sorted(matches, key = lambda x:x.distance)

img3 = cv2.drawMatches(im1,kp1, im2, kp2, matches[:10], None)
 

points1 = np.zeros((len(matches), 2), dtype=np.float32)
points2 = np.zeros((len(matches), 2), dtype=np.float32)

for i, match in enumerate(matches):
   points1[i, :] = kp1[match.queryIdx].pt 
   points2[i, :] = kp2[match.trainIdx].pt 
  
h, mask = cv2.findHomography(points1, points2, cv2.RANSAC)

height, width, channels = im2.shape
warp_image = cv2.warpPerspective(im1, h, (width, height))

warp_image_gray = cv2.cvtColor(warp_image, cv2.COLOR_BGR2GRAY)
mismatch = cv2.absdiff(warp_image_gray, img2)
ret,binary_img = cv2.threshold(mismatch,150,255,0)
cv2_imshow(binary_img)
t_image = cv2.threshold(mismatch, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
cv2_imshow(t_image)
filter = np.ones((4,4), np.uint8)
objects = cv2.dilate(t_image, filter, iterations=3)
# cv2_imshow(objects)
find_objects = cv2.findContours(objects.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
all_diffs = imutils.grab_contours(find_objects)
for i in all_diffs:
  if cv2.contourArea(i)>20:
    x,y,h,w = cv2.boundingRect(i)
    cv2.rectangle(im2, (x,y), (x+h, y+w), (0,0,255),3)
x = np.zeros((300,8,3), np.uint8)
output = np.hstack((warp_image, im2))
cv2_imshow(output)